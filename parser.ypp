%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
/* %error-verbose */
%define parse.error verbose
/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

%token BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR 
%token IF ELSE WHILE VAR PROCEDURE RETURN NULLTOKEN AND 
%token DIV EQUAL EQUALS GT GTE LT LTE MINUS NOT 
%token NOTEQUAL OR PLUS MUL AMP DEREFERENCE TRUE FALSE 
%token INT_LITERAL IDENTIFIER COMMA COLON UMINUS
%token LBRACE RBRACE SEMICOLON LPAREN RPAREN BAR 
%token LBRACKET RBRACKET STRING_LITERAL CHAR_LITERAL

%left OR
%left AND
%left EQUALS NOTEQUAL
%left LT LTE GT GTE
%left PLUS MINUS
%left MUL DIV
%right NOT
%precedence DEREFERENCE
%precedence UMINUS


%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */

Program : ProcedureList
        ;

ProcedureList : Procedure
              | Procedure ProcedureList
              ;

Procedure : PROCEDURE IDENTIFIER LPAREN ParamList RPAREN RETURN Type LBRACE Body OptionalReturn RBRACE
          ;

ParamList : Param
          | Param SEMICOLON ParamList
          ;

Param : IDList COLON Type
      |
      ;

IDList : IDENTIFIER
       | IDENTIFIER COMMA IDList
       ;

Body : OptionalDeclarations OptionalStatements
     ;

OptionalDeclarations : 
                     | Declarations
                     ;

OptionalStatements :
                   | Statements
                   ;

OptionalReturn : 
               | RETURN Expression SEMICOLON
               ;


Block : LBRACE OptionalDeclarations OptionalStatements RBRACE 
      ;


Declarations : Declaration
             | Declaration Declarations
             ;

Declaration : VAR SingleVarDeclaration SEMICOLON
            | VAR MultiVarDeclaration SEMICOLON
            | Procedure
            ;

SingleVarDeclaration : IDENTIFIER COLON STRING LBRACKET INT_LITERAL RBRACKET
                     | IDENTIFIER COLON Type 
                     ;

MultiVarDeclaration : IDList COLON Type 
                    | IDList COLON STRING LBRACKET INT_LITERAL RBRACKET
                    ;

Statements : Statement
           | Statement Statements
           ;

Statement : IDENTIFIER EQUAL Expression SEMICOLON
          | IDENTIFIER EQUAL STRING_LITERAL SEMICOLON
          | IDENTIFIER LBRACKET Expression RBRACKET EQUAL Expression SEMICOLON 
          | IF LPAREN Expression RPAREN Block
          | IF LPAREN Expression RPAREN Block ELSE Block
          | WHILE LPAREN Expression RPAREN Block
          | LBRACE Statements RBRACE
          | Block OptionalStatements
          | Procedure
          ;

Expression : Expression OR Expression
           | Expression AND Expression
           | Expression EQUALS Expression
           | Expression NOTEQUAL Expression
           | Expression LT Expression
           | Expression LTE Expression
           | Expression GT Expression
           | Expression GTE Expression
           | AdditiveExpr
           ;

AdditiveExpr : AdditiveExpr PLUS MultiplicativeExpr
             | AdditiveExpr MINUS MultiplicativeExpr
             | MultiplicativeExpr
             ;

MultiplicativeExpr : MultiplicativeExpr MUL UnaryExpr
                   | MultiplicativeExpr DIV UnaryExpr
                   | UnaryExpr
                   ;

UnaryExpr : NOT UnaryExpr
          | MINUS UnaryExpr %prec UMINUS
          | AMP Variable    
          | DEREFERENCE PrimaryExpr 
          | DEREFERENCE STRING LBRACKET INT_LITERAL RBRACKET
          | BAR Expression BAR
          | PrimaryExpr
          ;

Variable : IDENTIFIER
         | IDENTIFIER LBRACKET Expression RBRACKET
         ;

PrimaryExpr : IDENTIFIER
            | INT_LITERAL
            | LPAREN Expression RPAREN
            | IDENTIFIER LPAREN ArgumentList RPAREN 
            | IDENTIFIER LBRACKET Expression RBRACKET 
            | STRING_LITERAL 
            | CHAR_LITERAL 
            | TRUE 
            | FALSE 
            | NULLTOKEN 
            ;

ArgumentList : 
             | NonEmptyArgumentList 
             ;

NonEmptyArgumentList : Values 
                     | Values COMMA NonEmptyArgumentList 
                     ;

Type : BOOLEAN
     | CHAR
     | INTEGER
     | INTPTR
     | CHARPTR
     ;

Values : INT_LITERAL
       | CHAR_LITERAL
       | BOOLEAN 
       | CHARPTR
       | INTPTR
       | IDENTIFIER

%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(1);
}
