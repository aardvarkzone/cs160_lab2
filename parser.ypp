%{
    #include <cstdio>
    #include <cstdlib>
    #include <iostream> 
    using namespace std; 
    #define YYDEBUG 1

  



    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose 
/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */



/* %union {
    std::list<Proc_ptr>* u_proc_list;
    Program* u_program;
    std::list<Decl_ptr>* u_decl_list;
    Proc* u_proc;
    std::list<Stat_ptr>* u_stat_list;
    Procedure_block* u_procedure_block;
    Nested_block* u_nested_block;
    std::list<SymName_ptr>* u_symname_list;
    Decl* u_decl;
    Stat* u_stat;
    std::list<Expr_ptr>* u_expr_list;
    Return_stat* u_return_stat;
    Type* u_type;
    Expr* u_expr;
    Lhs* u_lhs;
    SymName* u_symname;
    Primitive* u_primitive;
    StringPrimitive* u_stringprimitive;

    // a couple of hardcoded types
    char* u_base_charptr;
    int u_base_int;
} */

/* %type <u_expr> PrimaryExpr
%type <u_expr> Expression
%type <u_expr> AdditiveExpr
%type <u_expr> MultiplicativeExpr
%type <u_expr> UnaryExpr
%type <u_expr_list> ArgumentList
%type <u_lhs> Variable

%type <u_program> Program
%type <u_proc_list> ProcedureList
%type <u_proc> Procedure */


%token  IDENTIFIER
%token INT_LITERAL
%token CHAR_LITERAL



%token BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR 
%token IF ELSE WHILE VAR PROCEDURE RETURN NULLTOKEN AND 
%token DIV EQUAL EQUALS GT GTE LT LTE MINUS NOT 
%token NOTEQUAL OR PLUS MUL AMP DEREFERENCE 
%token COMMA COLON 
%token LBRACE RBRACE SEMICOLON LPAREN RPAREN BAR 
%token LBRACKET RBRACKET STRING_LITERAL BOOL_LITERAL 

%left OR
%left AND
%left EQUALS NOTEQUAL
%left LT LTE GT GTE
%left PLUS MINUS
%left MUL DIV
%right NOT
%precedence DEREFERENCE



%%

Program : ProcedureList 
        ;

ProcedureList :  
              | Procedure ProcedureList 
              ;

Procedure : PROCEDURE IDENTIFIER LPAREN ParamList RPAREN RETURN Type LBRACE Body RBRACE 
          ;

ParamList : 
          | Param
          | ParamList SEMICOLON Param
          ;

Param : IDList COLON Type
      ;

IDList : IDENTIFIER
       | IDENTIFIER COMMA IDList
       ;

Body : ProcedureList Declarations Statements Return
     ;

Return : RETURN Expression SEMICOLON 
       ;

Declarations : 
            | Declaration Declarations
            ;

Declaration : VAR IDList COLON Type SEMICOLON
            | VAR IDList COLON STRING LBRACKET INT_LITERAL RBRACKET SEMICOLON
            ;

Statements :
            | Statement Statements
            ;

Statement : LHS EQUAL Expression SEMICOLON
          | LHS EQUAL STRING_LITERAL SEMICOLON
          | LHS EQUAL IDENTIFIER LPAREN ExpressionListOpt RPAREN SEMICOLON //function calls 
          | IF LPAREN Expression RPAREN Block
          | IF LPAREN Expression RPAREN Block ELSE Block
          | WHILE LPAREN Expression RPAREN Block
          | Block 
          ;

LHS : IDENTIFIER
    | IDENTIFIER LBRACKET Expression RBRACKET
    | DEREFERENCE IDENTIFIER

ExpressionListOpt : ExpressionList
                  | 

ExpressionList : Expression COMMA ExpressionList
               | Expression

Expression : BAR Expression BAR 
           | AMP LHS 
           | Expression OR Expression 
           | Expression AND Expression 
           | Expression EQUALS Expression 
           | Expression NOTEQUAL Expression 
           | Expression LT Expression 
           | Expression LTE Expression
           | Expression GT Expression 
           | Expression GTE Expression 
           | Expression DIV Expression
           | Expression MUL Expression
           | Expression PLUS Expression
           | Expression MINUS Expression
           | NOT Expression
           | MINUS Expression
           | IDENTIFIER
           | IDENTIFIER LBRACKET Expression RBRACKET
           | INT_LITERAL
           | CHAR_LITERAL
           | BOOL_LITERAL
           | DEREFERENCE Expression 
           | NULLTOKEN
           ; 

Type : BOOLEAN
     | CHAR
     | INTEGER
     | INTPTR
     | CHARPTR
     ;

Block : LBRACE Declarations Statements RBRACE 
      ;

%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    /* return; */
    exit(1);
}
